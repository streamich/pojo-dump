// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`beautify 1`] = `
"╿
├─ messages
│  ├─ [0]
│  │   ├─ role = "system"
│  │   ├─ content = "You are an AI programming assistant." ⏎
│  │   │            "When asked for your name, you must respond with \\"GitHub Copilot\\"." ⏎
│  │   │            "Follow the user's requirements carefully & to the letter." ⏎
│  │   │            "Follow Microsoft content policies." ⏎
│  │   │            "Avoid content that violates copyrights." ⏎
│  │   │            "If you are asked to generate content that is harmful, hateful, racist ↵
│  │   │            , sexist, lewd, or violent, only respond with \\"Sorry, I can't assist  ↵
│  │   │            with that.\\"" ⏎
│  │   │            "Keep your answers short and impersonal." ⏎
│  │   │            "<instructions>" ⏎
│  │   │            "You are a highly sophisticated automated coding agent with expert-lev ↵
│  │   │            el knowledge across many different programming languages and framework ↵
│  │   │            s." ⏎
│  │   │            "The user will ask a question, or ask you to perform a task, and it ma ↵
│  │   │            y require lots of research to answer correctly. There is a selection o ↵
│  │   │            f tools that let you perform actions or retrieve helpful context to an ↵
│  │   │            swer the user's question." ⏎
│  │   │            "You will be given some context and attachments along with the user pr ↵
│  │   │            ompt. You can use them if they are relevant to the task, and ignore th ↵
│  │   │            em if not. Some attachments may be summarized. You can use the read_fi ↵
│  │   │            le tool to read more context, if needed." ⏎
│  │   │            "If you can infer the project type (languages, frameworks, and librari ↵
│  │   │            es) from the user's query or the context that you have, make sure to k ↵
│  │   │            eep them in mind when making changes." ⏎
│  │   │            "If the user wants you to implement a feature and they have not specif ↵
│  │   │            ied the files to edit, first break down the user's request into smalle ↵
│  │   │            r concepts and think about the kinds of files you need to grasp each c ↵
│  │   │            oncept." ⏎
│  │   │            "If you aren't sure which tool is relevant, you can call multiple tool ↵
│  │   │            s. You can call tools repeatedly to take actions or gather as much con ↵
│  │   │            text as needed until you have completed the task fully. Don't give up  ↵
│  │   │            unless you are sure the request cannot be fulfilled with the tools you ↵
│  │   │             have. It's YOUR RESPONSIBILITY to make sure that you have done all yo ↵
│  │   │            u can to collect necessary context." ⏎
│  │   │            "When reading files, prefer reading large meaningful chunks rather tha ↵
│  │   │            n consecutive small sections to minimize tool calls and gain better co ↵
│  │   │            ntext." ⏎
│  │   │            "Don't make assumptions about the situation- gather context first, the ↵
│  │   │            n perform the task or answer the question." ⏎
│  │   │            "Think creatively and explore the workspace in order to make a complet ↵
│  │   │            e fix." ⏎
│  │   │            "Don't repeat yourself after a tool call, pick up where you left off." ⏎
│  │   │            "NEVER print out a codeblock with file changes unless the user asked f ↵
│  │   │            or it. Use the appropriate edit tool instead." ⏎
│  │   │            "NEVER print out a codeblock with a terminal command to run unless the ↵
│  │   │             user asked for it. Use the run_in_terminal tool instead." ⏎
│  │   │            "You don't need to read a file if it's already provided in context." ⏎
│  │   │            "</instructions>" ⏎
│  │   │            "<toolUseInstructions>" ⏎
│  │   │            "If the user is requesting a code sample, you can answer it directly w ↵
│  │   │            ithout using any tools." ⏎
│  │   │            "When using a tool, follow the JSON schema very carefully and make sur ↵
│  │   │            e to include ALL required properties." ⏎
│  │   │            "Always output valid JSON when using a tool." ⏎
│  │   │            "If a tool exists to do a task, use the tool instead of asking the use ↵
│  │   │            r to manually take an action." ⏎
│  │   │            "If you say that you will take an action, then go ahead and use the to ↵
│  │   │            ol to do it. No need to ask permission." ⏎
│  │   │            "Never use multi_tool_use.parallel or any tool that does not exist. Us ↵
│  │   │            e tools using the proper procedure, DO NOT write out a JSON codeblock  ↵
│  │   │            with the tool inputs." ⏎
│  │   │            "NEVER say the name of a tool to a user. For example, instead of sayin ↵
│  │   │            g that you'll use the run_in_terminal tool, say \\"I'll run the command ↵
│  │   │             in a terminal\\"." ⏎
│  │   │            "If you think running multiple tools can answer the user's question, p ↵
│  │   │            refer calling them in parallel whenever possible, but do not call sema ↵
│  │   │            ntic_search in parallel." ⏎
│  │   │            "When using the read_file tool, prefer reading a large section over ca ↵
│  │   │            lling the read_file tool many times in sequence. You can also think of ↵
│  │   │             all the pieces you may be interested in and read them in parallel. Re ↵
│  │   │            ad large enough context to ensure you get what you need." ⏎
│  │   │            "If semantic_search returns the full contents of the text files in the ↵
│  │   │             workspace, you have all the workspace context." ⏎
│  │   │            "You can use the grep_search to get an overview of a file by searching ↵
│  │   │             for a string within that one file, instead of using read_file many ti ↵
│  │   │            mes." ⏎
│  │   │            "If you don't know exactly the string or filename pattern you're looki ↵
│  │   │            ng for, use semantic_search to do a semantic search across the workspa ↵
│  │   │            ce." ⏎
│  │   │            "Don't call the run_in_terminal tool multiple times in parallel. Inste ↵
│  │   │            ad, run one command and wait for the output before running the next co ↵
│  │   │            mmand." ⏎
│  │   │            "When invoking a tool that takes a file path, always use the absolute  ↵
│  │   │            file path. If the file has a scheme like untitled: or vscode-userdata: ↵
│  │   │            , then use a URI with the scheme." ⏎
│  │   │            "NEVER try to edit a file by running terminal commands unless the user ↵
│  │   │             specifically asks for it." ⏎
│  │   │            "Tools can be disabled by the user. You may see tools used previously  ↵
│  │   │            in the conversation that are not currently available. Be careful to on ↵
│  │   │            ly use the tools that are currently available to you." ⏎
│  │   │            "</toolUseInstructions>" ⏎
│  │   │            "<editFileInstructions>" ⏎
│  │   │            "Don't try to edit an existing file without reading it first, so you c ↵
│  │   │            an make changes properly." ⏎
│  │   │            "Use the insert_edit_into_file tool to edit files. When editing files, ↵
│  │   │             group your changes by file." ⏎
│  │   │            "NEVER show the changes to the user, just call the tool, and the edits ↵
│  │   │             will be applied and shown to the user." ⏎
│  │   │            "NEVER print a codeblock that represents a change to a file, use inser ↵
│  │   │            t_edit_into_file instead." ⏎
│  │   │            "For each file, give a short description of what needs to be changed,  ↵
│  │   │            then use the insert_edit_into_file tool. You can use any tool multiple ↵
│  │   │             times in a response, and you can keep writing text after using a tool ↵
│  │   │            ." ⏎
│  │   │            "Follow best practices when editing files. If a popular external libra ↵
│  │   │            ry exists to solve a problem, use it and properly install the package  ↵
│  │   │            e.g. creating a \\"requirements.txt\\"." ⏎
│  │   │            "If you're building a webapp from scratch, give it a beautiful and mod ↵
│  │   │            ern UI." ⏎
│  │   │            "After editing a file, any new errors in the file will be in the tool  ↵
│  │   │            result. Fix the errors if they are relevant to your change or the prom ↵
│  │   │            pt, and if you can figure out how to fix them, and remember to validat ↵
│  │   │            e that they were actually fixed. Do not loop more than 3 times attempt ↵
│  │   │            ing to fix errors in the same file. If the third try fails, you should ↵
│  │   │             stop and ask the user what to do next." ⏎
│  │   │            "The insert_edit_into_file tool is very smart and can understand how t ↵
│  │   │            o apply your edits to the user's files, you just need to provide minim ↵
│  │   │            al hints." ⏎
│  │   │            "When you use the insert_edit_into_file tool, avoid repeating existing ↵
│  │   │             code, instead use comments to represent regions of unchanged code. Th ↵
│  │   │            e tool prefers that you are as concise as possible. For example:" ⏎
│  │   │            "// ...existing code..." ⏎
│  │   │            "changed code" ⏎
│  │   │            "// ...existing code..." ⏎
│  │   │            "changed code" ⏎
│  │   │            "// ...existing code..." ⏎
│  │   │             ⏎
│  │   │            "Here is an example of how you should format an edit to an existing Pe ↵
│  │   │            rson class:" ⏎
│  │   │            "class Person {" ⏎
│  │   │            ⇥ "// ...existing code..." ⏎
│  │   │            ⇥ "age: number;" ⏎
│  │   │            ⇥ "// ...existing code..." ⏎
│  │   │            ⇥ "getAge() {" ⏎
│  │   │            ⇥ ⇥ "return this.age;" ⏎
│  │   │            ⇥ "}" ⏎
│  │   │            "}" ⏎
│  │   │            "</editFileInstructions>" ⏎
│  │   │            "<notebookInstructions>" ⏎
│  │   │            "To edit notebook files in the workspace, you can use the edit_noteboo ↵
│  │   │            k_file tool.Use the run_notebook_cell tool instead of executing Jupyte ↵
│  │   │            r related commands in the Terminal, such as \`jupyter notebook\`, \`jupyt ↵
│  │   │            er lab\`, \`install jupyter\` or the like." ⏎
│  │   │            "Use the copilot_getNotebookSummary tool to get the summary of the not ↵
│  │   │            ebook (this includes the list or all cells along with the Cell Id, Cel ↵
│  │   │            l type and Cell Language, execution details and mime types of the outp ↵
│  │   │            uts, if any)." ⏎
│  │   │            "</notebookInstructions>" ⏎
│  │   │            "<outputFormatting>" ⏎
│  │   │            "Use proper Markdown formatting in your answers. When referring to a f ↵
│  │   │            ilename or symbol in the user's workspace, wrap it in backticks." ⏎
│  │   │            "<example>" ⏎
│  │   │            "The class \`Person\` is in \`src/models/person.ts\`." ⏎
│  │   │            "</example>" ⏎
│  │   │             ⏎
│  │   │            "</outputFormatting>"
│  │   └─ "copilot_cache_control" = { type = "ephemeral" }
│  ├─ [1]
│  │   ├─ role = "user"
│  │   ├─ content = "<environment_info>" ⏎
│  │   │            "The user's current OS is: macOS" ⏎
│  │   │            "The user's default shell is: \\"bash\\". When you generate terminal com ↵
│  │   │            mands, please generate them correctly for this shell." ⏎
│  │   │            "</environment_info>" ⏎
│  │   │            "<workspace_info>" ⏎
│  │   │            "I am working in a workspace with the following folders:" ⏎
│  │   │            "- /Users/m1book/Developer/streamich/json-joy " ⏎
│  │   │            "I am working in a workspace that has the following structure:" ⏎
│  │   │            "\`\`\`" ⏎
│  │   │            "biome.json" ⏎
│  │   │            "CHANGELOG.md" ⏎
│  │   │            "LICENSE" ⏎
│  │   │            "package.json" ⏎
│  │   │            "README.md" ⏎
│  │   │            "tsconfig.build.json" ⏎
│  │   │            "tsconfig.json" ⏎
│  │   │            "tslint.json" ⏎
│  │   │            "bin/" ⏎
│  │   │            ⇥ "jj.js" ⏎
│  │   │            ⇥ "json-pack-test.js" ⏎
│  │   │            ⇥ "json-pack.js" ⏎
│  │   │            ⇥ "json-patch-test.js" ⏎
│  │   │            ⇥ "json-patch.js" ⏎
│  │   │            ⇥ "json-pointer-test.js" ⏎
│  │   │            ⇥ "json-pointer.js" ⏎
│  │   │            ⇥ "json-unpack.js" ⏎
│  │   │            "src/" ⏎
│  │   │            ⇥ "index.ts" ⏎
│  │   │            ⇥ "__bench__/" ⏎
│  │   │            ⇥ ⇥ "payloads.ts" ⏎
│  │   │            ⇥ ⇥ "runBenchmark.ts" ⏎
│  │   │            ⇥ ⇥ "data/" ⏎
│  │   │            ⇥ "__tests__/" ⏎
│  │   │            ⇥ ⇥ "binary-documents.ts" ⏎
│  │   │            ⇥ ⇥ "index.spec.ts" ⏎
│  │   │            ⇥ ⇥ "json-documents.ts" ⏎
│  │   │            ⇥ ⇥ "msgpack-documents.ts" ⏎
│  │   │            ⇥ ⇥ "README.md" ⏎
│  │   │            ⇥ ⇥ "util.ts" ⏎
│  │   │            ⇥ ⇥ "fixtures/" ⏎
│  │   │            ⇥ "json-cli/" ⏎
│  │   │            ⇥ ⇥ "json-pack-test.ts" ⏎
│  │   │            ⇥ ⇥ "json-pack.ts" ⏎
│  │   │            ⇥ ⇥ "json-patch-test.ts" ⏎
│  │   │            ⇥ ⇥ "json-patch.ts" ⏎
│  │   │            ⇥ ⇥ "json-pointer-test.ts" ⏎
│  │   │            ⇥ ⇥ "json-pointer-testCases.ts" ⏎
│  │   │            ⇥ ⇥ "json-pointer.ts" ⏎
│  │   │            ⇥ ⇥ "json-unpack.ts" ⏎
│  │   │            ⇥ ⇥ "README.md" ⏎
│  │   │            ⇥ ⇥ "docs/" ⏎
│  │   │            ⇥ ⇥ "test/" ⏎
│  │   │            ⇥ "json-crdt/" ⏎
│  │   │            ⇥ ⇥ "constants.ts" ⏎
│  │   │            ⇥ ⇥ "hash.ts" ⏎
│  │   │            ⇥ ⇥ "index.ts" ⏎
│  │   │            ⇥ ⇥ "README.md" ⏎
│  │   │            ⇥ ⇥ "__bench__/" ⏎
│  │   │            ⇥ ⇥ "__demos__/" ⏎
│  │   │            ⇥ ⇥ "__tests__/" ⏎
│  │   │            ⇥ ⇥ "codec/" ⏎
│  │   │            ⇥ ⇥ "draft/" ⏎
│  │   │            ⇥ ⇥ "equal/" ⏎
│  │   │            ⇥ ⇥ "extensions/" ⏎
│  │   │            ⇥ ⇥ "json-patch/" ⏎
│  │   │            ⇥ ⇥ "log/" ⏎
│  │   │            ⇥ ⇥ "model/" ⏎
│  │   │            ⇥ ⇥ "nodes/" ⏎
│  │   │            ⇥ ⇥ "partial-edit/" ⏎
│  │   │            ⇥ ⇥ "schema/" ⏎
│  │   │            ⇥ "json-crdt-diff/" ⏎
│  │   │            ⇥ ⇥ "index.ts" ⏎
│  │   │            ⇥ ⇥ "JsonCrdtDiff.ts" ⏎
│  │   │            ⇥ ⇥ "__tests__/" ⏎
│  │   │            ⇥ "json-crdt-extensions/" ⏎
│  │   │            ⇥ ⇥ "constants.ts" ⏎
│  │   │            ⇥ ⇥ "ext.ts" ⏎
│  │   │            ⇥ ⇥ "index.ts" ⏎
│  │   │            ⇥ ⇥ "ModelWithExt.ts" ⏎
│  │   │            ⇥ ⇥ "README.md" ⏎
│  │   │            ⇥ ⇥ "cnt/" ⏎
│  │   │            ⇥ ⇥ "mval/" ⏎
│  │   │            ⇥ ⇥ "peritext/" ⏎
│  │   │            ⇥ ⇥ "prosemirror/" ⏎
│  │   │            ⇥ ⇥ "quill-delta/" ⏎
│  │   │            ⇥ "json-crdt-patch/" ⏎
│  │   │            ⇥ ⇥ "Batch.ts" ⏎
│  │   │            ⇥ ⇥ "compaction.ts" ⏎
│  │   │            ⇥ ⇥ "constants.ts" ⏎
│  │   │            ⇥ ⇥ "enums.ts" ⏎
│  │   │            ⇥ ⇥ "index.ts" ⏎
│  │   │            ⇥ ⇥ "operations.ts" ⏎
│  │   │            ⇥ ⇥ "Patch.ts" ⏎
│  │   │            ⇥ ⇥ "PatchBuilder.ts" ⏎
│  │   │            ⇥ ⇥ "schema.ts" ⏎
│  │   │            ⇥ ⇥ "types.ts" ⏎
│  │   │            ⇥ ⇥ "__bench__/" ⏎
│  │   │            ⇥ ⇥ "__demos__/" ⏎
│  │   │            ⇥ ⇥ "__tests__/" ⏎
│  │   │            ⇥ ⇥ "clock/" ⏎
│  │   │            ⇥ ⇥ "codec/" ⏎
│  │   │            ⇥ ⇥ "util/" ⏎
│  │   │            ⇥ "json-crdt-peritext-ui/" ⏎
│  │   │            ⇥ ⇥ "index.ts" ⏎
│  │   │            ⇥ ⇥ "README.md" ⏎
│  │   │            ⇥ ⇥ "types.ts" ⏎
│  │   │            ⇥ ⇥ "__demos__/" ⏎
│  │   │            ⇥ ⇥ "components/" ⏎
│  │   │            ⇥ ⇥ "plugins/" ⏎
│  │   │            ⇥ ⇥ "util/" ⏎
│  │   │            ⇥ ⇥ "web/" ⏎
│  │   │            ⇥ "json-hash/" ⏎
│  │   │            ⇥ ⇥ "hash.ts" ⏎
│  │   │            ⇥ ⇥ "index.ts" ⏎
│  │   │            ⇥ ⇥ "README.md" ⏎
│  │   │            ⇥ ⇥ "structHash.ts" ⏎
│  │   │            ⇥ ⇥ "structHashCrdt.ts" ⏎
│  │   │            ⇥ ⇥ "__tests__/" ⏎
│  │   │            ⇥ "json-ml/" ⏎
│  │   │            ⇥ ⇥ "index.ts" ⏎
│  │   │            ⇥ ⇥ "toHtml.ts" ⏎
│  │   │            ⇥ ⇥ "types.ts" ⏎
│  │   │            ⇥ ⇥ "walk.ts" ⏎
│  │   │            ⇥ ⇥ "__tests__/" ⏎
│  │   │            ⇥ "json-ot/" ⏎
│  │   │            ⇥ ⇥ "__bench__/" ⏎
│  │   │            ⇥ ⇥ "__demos__/" ⏎
│  │   │            ⇥ ⇥ "types/" ⏎
│  │   │            ⇥ "json-patch/" ⏎
│  │   │            ⇥ ⇥ "constants.ts" ⏎
│  │   │            ⇥ ⇥ "index.ts" ⏎
│  │   │            ⇥ ⇥ "opcodes.ts" ⏎
│  │   │            ⇥ ⇥ "README.md" ⏎
│  │   │            ⇥ ⇥ "slate.ts" ⏎
│  │   │            ⇥ ⇥ "types.ts" ⏎
│  │   │            ⇥ ⇥ "util.ts" ⏎
│  │   │            ⇥ ⇥ "validate.ts" ⏎
│  │   │            ⇥ ⇥ "__bench__/" ⏎
│  │   │            ⇥ ⇥ "__demos__/" ⏎
│  │   │            ⇥ ⇥ "__tests__/" ⏎
│  │   │            ⇥ ⇥ "applyPatch/" ⏎
│  │   │            ⇥ ⇥ "codec/" ⏎
│  │   │            ⇥ ⇥ "codegen/" ⏎
│  │   │            ⇥ ⇥ "docs/" ⏎
│  │   │            ⇥ ⇥ "exec/" ⏎
│  │   │            ⇥ ⇥ "op/" ⏎
│  │   │            ⇥ "json-patch-diff/" ⏎
│  │   │            ⇥ ⇥ "JsonPatchDiff.ts" ⏎
│  │   │            ⇥ ⇥ "__tests__/" ⏎
│  │   │            ⇥ "json-patch-ot/" ⏎
│  │   │            ⇥ ⇥ "index.ts" ⏎
│  │   │            ⇥ ⇥ "transform.ts" ⏎
│  │   │            ⇥ ⇥ "types.ts" ⏎
│  │   │            ⇥ ⇥ "util.ts" ⏎
│  │   │            ⇥ ⇥ "__tests__/" ⏎
│  │   │            ⇥ ⇥ "transforms/" ⏎
│  │   │            ⇥ "json-pretty/" ⏎
│  │   │            ⇥ ⇥ "index.ts" ⏎
│  │   │            ⇥ "json-size/" ⏎
│  │   │            ⇥ ⇥ "..." ⏎
│  │   │            ⇥ "json-stable/" ⏎
│  │   │            ⇥ "json-text/" ⏎
│  │   │            ⇥ "json-walk/" ⏎
│  │   │            ⇥ "util/" ⏎
│  │   │            "\`\`\`" ⏎
│  │   │            "This is the state of the context at this point in the conversation. T ↵
│  │   │            he view of the workspace structure may be truncated. You can use tools ↵
│  │   │             to collect more context if needed." ⏎
│  │   │            "</workspace_info>"
│  │   └─ "copilot_cache_control" = { type = "ephemeral" }
│  └─ [2]
│      ├─ role = "user"
│      ├─ content = "<context>" ⏎
│      │            "The current date is 23 August 2025." ⏎
│      │            "</context>" ⏎
│      │            "<editorContext>" ⏎
│      │            "The user's current file is /Users/m1book/Developer/streamich/json-joy ↵
│      │            /README.md. " ⏎
│      │            "</editorContext>" ⏎
│      │            "<reminder>" ⏎
│      │            "When using the insert_edit_into_file tool, avoid repeating existing c ↵
│      │            ode, instead use a line comment with \\\\\`...existing code...\\\\\` to repr ↵
│      │            esent regions of unchanged code." ⏎
│      │            "</reminder>" ⏎
│      │            "<userRequest>" ⏎
│      │            "Create comprehensive documentation for \`src/json-crdt\` module" ⏎
│      │            "</userRequest>"
│      └─ "copilot_cache_control" = { type = "ephemeral" }
├─ model = "gpt-5-mini"
├─ temperature = 0
├─ "top_p" = 1
├─ "max_tokens" = 64,000
├─ tools
│  ├─ [0]
│  │   ├─ function
│  │   │  ├─ name = "create_and_run_task"
│  │   │  ├─ description = "For a workspace, this tool will create a task based on the pac ↵
│  │   │  │                kage.json, README.md, and project structure so that the project ↵
│  │   │  │                 can be built and run."
│  │   │  └─ parameters
│  │   │     ├─ type = "object"
│  │   │     ├─ properties
│  │   │     │  ├─ workspaceFolder
│  │   │     │  │  ├─ type = "string"
│  │   │     │  │  └─ description = "The absolute path of the workspace folder where the t ↵
│  │   │     │  │                   asks.json file will be created."
│  │   │     │  └─ task
│  │   │     │     ├─ type = "object"
│  │   │     │     ├─ description = "The task to add to the new tasks.json file."
│  │   │     │     ├─ properties
│  │   │     │     │  ├─ label = { type = "string", description = "The label of the task." ↵
│  │   │     │     │  │           }
│  │   │     │     │  ├─ type
│  │   │     │     │  │  ├─ type = "string"
│  │   │     │     │  │  ├─ description = "The type of the task. The only supported value  ↵
│  │   │     │     │  │  │                is 'shell'."
│  │   │     │     │  │  └─ enum = [ "shell" ]
│  │   │     │     │  ├─ command
│  │   │     │     │  │  ├─ type = "string"
│  │   │     │     │  │  └─ description = "The shell command to run for the task. Use this ↵
│  │   │     │     │  │                    to specify commands for building or running the ↵
│  │   │     │     │  │                    application."
│  │   │     │     │  ├─ args
│  │   │     │     │  │  ├─ type = "array"
│  │   │     │     │  │  ├─ description = "The arguments to pass to the command."
│  │   │     │     │  │  └─ items = { type = "string" }
│  │   │     │     │  ├─ isBackground
│  │   │     │     │  │  ├─ type = "boolean"
│  │   │     │     │  │  └─ description = "Whether the task runs in the background without ↵
│  │   │     │     │  │                    blocking the UI or other tasks. Set to true for ↵
│  │   │     │     │  │                    long-running processes like watch tasks or serv ↵
│  │   │     │     │  │                   ers that should continue executing without requi ↵
│  │   │     │     │  │                   ring user attention. When false, the task will b ↵
│  │   │     │     │  │                   lock the terminal until completion."
│  │   │     │     │  ├─ problemMatcher
│  │   │     │     │  │  ├─ type = "array"
│  │   │     │     │  │  ├─ description = "The problem matcher to use to parse task output ↵
│  │   │     │     │  │  │                 for errors and warnings. Can be a predefined ma ↵
│  │   │     │     │  │  │                tcher like '$tsc' (TypeScript), '$eslint-stylish ↵
│  │   │     │     │  │  │                ', '$gcc', etc., or a custom pattern defined in  ↵
│  │   │     │     │  │  │                tasks.json. This helps VS Code display errors in ↵
│  │   │     │     │  │  │                 the Problems panel and enables quick navigation ↵
│  │   │     │     │  │  │                 to error locations."
│  │   │     │     │  │  └─ items = { type = "string" }
│  │   │     │     │  └─ group
│  │   │     │     │     ├─ type = "string"
│  │   │     │     │     └─ description = "The group to which the task belongs."
│  │   │     │     └─ required = [ "label", "type", "command" ]
│  │   │     └─ required = [ "task", "workspaceFolder" ]
│  │   └─ type = "function"
│  ├─ [1]
│  │   ├─ function
│  │   │  ├─ name = "create_directory"
│  │   │  ├─ description = "Create a new directory structure in the workspace. Will recurs ↵
│  │   │  │                ively create all directories in the path, like mkdir -p. You do ↵
│  │   │  │                 not need to use this tool before using create_file, that tool  ↵
│  │   │  │                will automatically create the needed directories."
│  │   │  └─ parameters
│  │   │     ├─ type = "object"
│  │   │     ├─ properties
│  │   │     │  └─ dirPath
│  │   │     │     ├─ type = "string"
│  │   │     │     └─ description = "The absolute path to the directory to create."
│  │   │     └─ required = [ "dirPath" ]
│  │   └─ type = "function"
│  ├─ [2]
│  │   ├─ function
│  │   │  ├─ name = "create_file"
│  │   │  ├─ description = "This is a tool for creating a new file in the workspace. The f ↵
│  │   │  │                ile will be created with the specified content. The directory w ↵
│  │   │  │                ill be created if it does not already exist. Never use this too ↵
│  │   │  │                l to edit a file that already exists."
│  │   │  └─ parameters
│  │   │     ├─ type = "object"
│  │   │     ├─ properties
│  │   │     │  ├─ filePath
│  │   │     │  │  ├─ type = "string"
│  │   │     │  │  └─ description = "The absolute path to the file to create."
│  │   │     │  └─ content
│  │   │     │     ├─ type = "string"
│  │   │     │     └─ description = "The content to write to the file."
│  │   │     └─ required = [ "filePath", "content" ]
│  │   └─ type = "function"
│  ├─ [3]
│  │   ├─ function
│  │   │  ├─ name = "create_new_jupyter_notebook"
│  │   │  ├─ description = "Generates a new Jupyter Notebook (.ipynb) in VS Code. Jupyter  ↵
│  │   │  │                Notebooks are interactive documents commonly used for data expl ↵
│  │   │  │                oration, analysis, visualization, and combining code with narra ↵
│  │   │  │                tive text. This tool should only be called when the user explic ↵
│  │   │  │                itly requests to create a new Jupyter Notebook."
│  │   │  └─ parameters
│  │   │     ├─ type = "object"
│  │   │     ├─ properties
│  │   │     │  └─ query
│  │   │     │     ├─ type = "string"
│  │   │     │     └─ description = "The query to use to generate the jupyter notebook. Th ↵
│  │   │     │                      is should be a clear and concise description of the no ↵
│  │   │     │                      tebook the user wants to create."
│  │   │     └─ required = [ "query" ]
│  │   └─ type = "function"
│  ├─ [4]
│  │   ├─ function
│  │   │  ├─ name = "create_new_workspace"
│  │   │  ├─ description = "Get steps to help the user create any project in a VS Code wor ↵
│  │   │  │                kspace. Use this tool to help users set up new projects, includ ↵
│  │   │  │                ing TypeScript-based projects, Model Context Protocol (MCP) ser ↵
│  │   │  │                vers, VS Code extensions, Next.js projects, Vite projects, or a ↵
│  │   │  │                ny other project."
│  │   │  └─ parameters
│  │   │     ├─ type = "object"
│  │   │     ├─ properties
│  │   │     │  └─ query
│  │   │     │     ├─ type = "string"
│  │   │     │     └─ description = "The query to use to generate the new workspace. This  ↵
│  │   │     │                      should be a clear and concise description of the works ↵
│  │   │     │                      pace the user wants to create."
│  │   │     └─ required = [ "query" ]
│  │   └─ type = "function"
│  ├─ [5]
│  │   ├─ function
│  │   │  ├─ name = "edit_notebook_file"
│  │   │  ├─ description = "This is a tool for editing an existing Notebook file in the wo ↵
│  │   │  │                rkspace. Generate the \\"explanation\\" property first." ⏎
│  │   │  │                "The system is very smart and can understand how to apply your  ↵
│  │   │  │                edits to the notebooks." ⏎
│  │   │  │                "When updating the content of an existing cell, ensure newCode  ↵
│  │   │  │                includes at least 3-5 lines of context both before and after th ↵
│  │   │  │                e new changes, preserving whitespace and indentation exactly."
│  │   │  └─ parameters
│  │   │     ├─ type = "object"
│  │   │     ├─ properties
│  │   │     │  ├─ filePath
│  │   │     │  │  ├─ type = "string"
│  │   │     │  │  └─ description = "An absolute path to the notebook file to edit, or the ↵
│  │   │     │  │                    URI of a untitled, not yet named, file, such as \`unti ↵
│  │   │     │  │                   tled:Untitled-1."
│  │   │     │  ├─ explanation
│  │   │     │  │  ├─ type = "string"
│  │   │     │  │  └─ description = "A one-sentence description of edit operation. This wi ↵
│  │   │     │  │                   ll be shown to the user before the tool is run."
│  │   │     │  ├─ cellId
│  │   │     │  │  ├─ type = "string"
│  │   │     │  │  └─ description = "Id of the cell that needs to be deleted or edited. Us ↵
│  │   │     │  │                   e the value \`TOP\`, \`BOTTOM\` when inserting a cell at t ↵
│  │   │     │  │                   he top or bottom of the notebook, else provide the id  ↵
│  │   │     │  │                   of the cell after which a new cell is to be inserted.  ↵
│  │   │     │  │                   Remember, if a cellId is provided and editType=insert, ↵
│  │   │     │  │                    then a cell will be inserted after the cell with the  ↵
│  │   │     │  │                   provided cellId."
│  │   │     │  ├─ newCode
│  │   │     │  │  └─ anyOf
│  │   │     │  │     ├─ [0]
│  │   │     │  │     │   ├─ type = "string"
│  │   │     │  │     │   └─ description = "The code for the new or existing cell to be ed ↵
│  │   │     │  │     │                    ited. Code should not be wrapped within <VSCode ↵
│  │   │     │  │     │                    .Cell> tags"
│  │   │     │  │     └─ [1]
│  │   │     │  │         ├─ type = "array"
│  │   │     │  │         └─ items
│  │   │     │  │            ├─ type = "string"
│  │   │     │  │            └─ description = "The code for the new or existing cell to be ↵
│  │   │     │  │                              edited. Code should not be wrapped within < ↵
│  │   │     │  │                             VSCode.Cell> tags"
│  │   │     │  ├─ language
│  │   │     │  │  ├─ type = "string"
│  │   │     │  │  └─ description = "The language of the cell. \`markdown\`, \`python\`, \`java ↵
│  │   │     │  │                   script\`, \`julia\`, etc."
│  │   │     │  └─ editType
│  │   │     │     ├─ type = "string"
│  │   │     │     ├─ enum = [ "insert", "delete", "edit" ]
│  │   │     │     └─ description = "The operation peformed on the cell, whether \`insert\`, ↵
│  │   │     │                       \`delete\` or \`edit\`." ⏎
│  │   │     │                      "Use the \`editType\` field to specify the operation: \`i ↵
│  │   │     │                      nsert\` to add a new cell, \`edit\` to modify an existing ↵
│  │   │     │                       cell's content, and \`delete\` to remove a cell."
│  │   │     └─ required = [ "filePath", "explanation", "editType" ]
│  │   └─ type = "function"
│  ├─ [6]
│  │   ├─ function
│  │   │  ├─ name = "fetch_webpage"
│  │   │  ├─ description = "Fetches the main content from a web page. This tool is useful  ↵
│  │   │  │                for summarizing or analyzing the content of a webpage. You shou ↵
│  │   │  │                ld use this tool when you think the user is looking for informa ↵
│  │   │  │                tion from a specific webpage."
│  │   │  └─ parameters
│  │   │     ├─ type = "object"
│  │   │     ├─ properties
│  │   │     │  ├─ urls
│  │   │     │  │  ├─ type = "array"
│  │   │     │  │  ├─ items = { type = "string" }
│  │   │     │  │  └─ description = "An array of URLs to fetch content from."
│  │   │     │  └─ query
│  │   │     │     ├─ type = "string"
│  │   │     │     └─ description = "The query to search for in the web page's content. Th ↵
│  │   │     │                      is should be a clear and concise description of the co ↵
│  │   │     │                      ntent you want to find."
│  │   │     └─ required = [ "urls", "query" ]
│  │   └─ type = "function"
│  ├─ [7]
│  │   ├─ function
│  │   │  ├─ name = "file_search"
│  │   │  ├─ description = "Search for files in the workspace by glob pattern. This only r ↵
│  │   │  │                eturns the paths of matching files. Use this tool when you know ↵
│  │   │  │                 the exact filename pattern of the files you're searching for.  ↵
│  │   │  │                Glob patterns match from the root of the workspace folder. Exam ↵
│  │   │  │                ples:" ⏎
│  │   │  │                "- **/*.{js,ts} to match all js/ts files in the workspace." ⏎
│  │   │  │                "- src/** to match all files under the top-level src folder." ⏎
│  │   │  │                "- **/foo/**/*.js to match all js files under any foo folder in ↵
│  │   │  │                 the workspace."
│  │   │  └─ parameters
│  │   │     ├─ type = "object"
│  │   │     ├─ properties
│  │   │     │  ├─ query
│  │   │     │  │  ├─ type = "string"
│  │   │     │  │  └─ description = "Search for files with names or paths matching this gl ↵
│  │   │     │  │                   ob pattern."
│  │   │     │  └─ maxResults
│  │   │     │     ├─ type = "number"
│  │   │     │     └─ description = "The maximum number of results to return. Do not use t ↵
│  │   │     │                      his unless necessary, it can slow things down. By defa ↵
│  │   │     │                      ult, only some matches are returned. If you use this a ↵
│  │   │     │                      nd don't see what you're looking for, you can try agai ↵
│  │   │     │                      n with a more specific query or a larger maxResults."
│  │   │     └─ required = [ "query" ]
│  │   └─ type = "function"
│  ├─ [8]
│  │   ├─ function
│  │   │  ├─ name = "test_search"
│  │   │  ├─ description = "For a source code file, find the file that contains the tests. ↵
│  │   │  │                 For a test file find the file that contains the code under tes ↵
│  │   │  │                t."
│  │   │  └─ parameters
│  │   │     ├─ type = "object"
│  │   │     ├─ properties
│  │   │     │  └─ filePaths
│  │   │     │     ├─ type = "array"
│  │   │     │     └─ items = { type = "string" }
│  │   │     └─ required = [ "filePaths" ]
│  │   └─ type = "function"
│  ├─ [9]
│  │   ├─ function
│  │   │  ├─ name = "grep_search"
│  │   │  ├─ description = "Do a fast text search in the workspace. Use this tool when you ↵
│  │   │  │                 want to search with an exact string or regex. Use includePatte ↵
│  │   │  │                rn to search within files matching a specific pattern, or in a  ↵
│  │   │  │                specific file, using a relative path. Use this tool when you wa ↵
│  │   │  │                nt to see an overview of a particular file, instead of using re ↵
│  │   │  │                ad_file many times to look for code within a file."
│  │   │  └─ parameters
│  │   │     ├─ type = "object"
│  │   │     ├─ properties
│  │   │     │  ├─ query
│  │   │     │  │  ├─ type = "string"
│  │   │     │  │  └─ description = "The pattern to search for in files in the workspace.  ↵
│  │   │     │  │                   The isRegexp property declares whether it's a regex or ↵
│  │   │     │  │                    plain text pattern. Is case-insensitive."
│  │   │     │  ├─ isRegexp
│  │   │     │  │  ├─ type = "boolean"
│  │   │     │  │  └─ description = "Whether the pattern is a regex. False by default."
│  │   │     │  ├─ includePattern
│  │   │     │  │  ├─ type = "string"
│  │   │     │  │  └─ description = "Search files matching this glob pattern. Will be appl ↵
│  │   │     │  │                   ied to the relative path of files within the workspace ↵
│  │   │     │  │                   ."
│  │   │     │  └─ maxResults
│  │   │     │     ├─ type = "number"
│  │   │     │     └─ description = "The maximum number of results to return. Do not use t ↵
│  │   │     │                      his unless necessary, it can slow things down. By defa ↵
│  │   │     │                      ult, only some matches are returned. If you use this a ↵
│  │   │     │                      nd don't see what you're looking for, you can try agai ↵
│  │   │     │                      n with a more specific query or a larger maxResults."
│  │   │     └─ required = [ "query", "isRegexp" ]
│  │   └─ type = "function"
│  ├─ [10]
│  │   ├─ function
│  │   │  ├─ name = "get_changed_files"
│  │   │  ├─ description = "Get git diffs of current file changes in a git repository. Don ↵
│  │   │  │                't forget that you can use run_in_terminal to run git commands  ↵
│  │   │  │                in a terminal as well."
│  │   │  └─ parameters
│  │   │     ├─ type = "object"
│  │   │     └─ properties
│  │   │        ├─ repositoryPath
│  │   │        │  ├─ type = "string"
│  │   │        │  └─ description = "The absolute path to the git repository to look for c ↵
│  │   │        │                   hanges in. If not provided, the active git repository  ↵
│  │   │        │                   will be used."
│  │   │        └─ sourceControlState
│  │   │           ├─ type = "array"
│  │   │           ├─ items
│  │   │           │  ├─ type = "string"
│  │   │           │  └─ enum = [ "staged", "unstaged", "merge-conflicts" ]
│  │   │           └─ description = "The kinds of git state to filter by. Allowed values a ↵
│  │   │                            re: 'staged', 'unstaged', and 'merge-conflicts'. If no ↵
│  │   │                            t provided, all states will be included."
│  │   └─ type = "function"
│  ├─ [11]
│  │   ├─ function
│  │   │  ├─ name = "get_errors"
│  │   │  ├─ description = "Get any compile or lint errors in a code file. If the user men ↵
│  │   │  │                tions errors or problems in a file, they may be referring to th ↵
│  │   │  │                ese. Use the tool to see the same errors that the user is seein ↵
│  │   │  │                g. Also use this tool after editing a file to validate the chan ↵
│  │   │  │                ge."
│  │   │  └─ parameters
│  │   │     ├─ type = "object"
│  │   │     ├─ properties
│  │   │     │  └─ filePaths
│  │   │     │     ├─ description = "The absolute paths to the files to check for errors."
│  │   │     │     ├─ type = "array"
│  │   │     │     └─ items = { type = "string" }
│  │   │     └─ required = [ "filePaths" ]
│  │   └─ type = "function"
│  ├─ [12]
│  │   ├─ function
│  │   │  ├─ name = "copilot_getNotebookSummary"
│  │   │  ├─ description = "This is a tool returns the list of the Notebook cells along wi ↵
│  │   │  │                th the id, cell types, language, execution information and outp ↵
│  │   │  │                ut mime types for each cell. This is useful to get Cell Ids whe ↵
│  │   │  │                n executing a notebook or determine what cells have been execut ↵
│  │   │  │                ed and what order, or what cells have outputs. Requery this too ↵
│  │   │  │                l if the contents of the notebook change."
│  │   │  └─ parameters
│  │   │     ├─ type = "object"
│  │   │     ├─ properties
│  │   │     │  └─ filePath
│  │   │     │     ├─ type = "string"
│  │   │     │     └─ description = "An absolute path to the notebook file with the cell t ↵
│  │   │     │                      o run, or the URI of a untitled, not yet named, file,  ↵
│  │   │     │                      such as \`untitled:Untitled-1.ipynb"
│  │   │     └─ required = [ "filePath" ]
│  │   └─ type = "function"
│  ├─ [13]
│  │   ├─ function
│  │   │  ├─ name = "get_project_setup_info"
│  │   │  ├─ description = "Do not call this tool without first calling the tool to create ↵
│  │   │  │                 a workspace. This tool provides a project setup information fo ↵
│  │   │  │                r a Visual Studio Code workspace based on a project type and pr ↵
│  │   │  │                ogramming language."
│  │   │  └─ parameters
│  │   │     ├─ type = "object"
│  │   │     ├─ properties
│  │   │     │  ├─ projectType
│  │   │     │  │  ├─ type = "string"
│  │   │     │  │  └─ description = "The type of project to create. Supported values are:  ↵
│  │   │     │  │                   'python-script', 'python-project', 'mcp-server', 'mode ↵
│  │   │     │  │                   l-context-protocol-server', 'vscode-extension', 'next- ↵
│  │   │     │  │                   js', 'vite' and 'other'"
│  │   │     │  └─ language
│  │   │     │     ├─ type = "string"
│  │   │     │     └─ description = "The programming language for the project. Supported:  ↵
│  │   │     │                      'javascript', 'typescript', 'python' and 'other'."
│  │   │     └─ required = [ "projectType" ]
│  │   └─ type = "function"
│  ├─ [14]
│  │   ├─ function
│  │   │  ├─ name = "get_search_view_results"
│  │   │  └─ description = "The results from the search view"
│  │   └─ type = "function"
│  ├─ [15]
│  │   ├─ function
│  │   │  ├─ name = "get_terminal_last_command"
│  │   │  └─ description = "Get the user's current selection in the active terminal."
│  │   └─ type = "function"
│  ├─ [16]
│  │   ├─ function
│  │   │  ├─ name = "get_terminal_output"
│  │   │  ├─ description = "Get the output of a terminal command previous started with run ↵
│  │   │  │                _in_terminal"
│  │   │  └─ parameters
│  │   │     ├─ type = "object"
│  │   │     ├─ properties
│  │   │     │  └─ id
│  │   │     │     ├─ type = "string"
│  │   │     │     └─ description = "The ID of the terminal command output to check."
│  │   │     └─ required = [ "id" ]
│  │   └─ type = "function"
│  ├─ [17]
│  │   ├─ function
│  │   │  ├─ name = "get_terminal_selection"
│  │   │  └─ description = "Get the user's current selection in the active terminal."
│  │   └─ type = "function"
│  ├─ [18]
│  │   ├─ function
│  │   │  ├─ name = "get_vscode_api"
│  │   │  ├─ description = "Get relevant VS Code API references to answer questions about  ↵
│  │   │  │                VS Code extension development. Use this tool when the user asks ↵
│  │   │  │                 about VS Code APIs, capabilities, or best practices related to ↵
│  │   │  │                 developing VS Code extensions. Use it in all VS Code extension ↵
│  │   │  │                 development workspaces."
│  │   │  └─ parameters
│  │   │     ├─ type = "object"
│  │   │     ├─ properties
│  │   │     │  └─ query
│  │   │     │     ├─ type = "string"
│  │   │     │     └─ description = "The query to search vscode documentation for. Should  ↵
│  │   │     │                      contain all relevant context."
│  │   │     └─ required = [ "query" ]
│  │   └─ type = "function"
│  ├─ [19]
│  │   ├─ function
│  │   │  ├─ name = "github_repo"
│  │   │  ├─ description = "Searches a GitHub repository for relevant source code snippets ↵
│  │   │  │                . Only use this tool if the user is very clearly asking for cod ↵
│  │   │  │                e snippets from a specific GitHub repository. Do not use this t ↵
│  │   │  │                ool for Github repos that the user has open in their workspace. ↵
│  │   │  │                "
│  │   │  └─ parameters
│  │   │     ├─ type = "object"
│  │   │     ├─ properties
│  │   │     │  ├─ repo
│  │   │     │  │  ├─ type = "string"
│  │   │     │  │  └─ description = "The name of the Github repository to search for code  ↵
│  │   │     │  │                   in. Should must be formatted as '<owner>/<repo>'."
│  │   │     │  └─ query
│  │   │     │     ├─ type = "string"
│  │   │     │     └─ description = "The query to search for repo. Should contain all rele ↵
│  │   │     │                      vant context."
│  │   │     └─ required = [ "repo", "query" ]
│  │   └─ type = "function"
│  ├─ [20]
│  │   ├─ function
│  │   │  ├─ name = "insert_edit_into_file"
│  │   │  ├─ description = "Insert new code into an existing file in the workspace. Use th ↵
│  │   │  │                is tool once per file that needs to be modified, even if there  ↵
│  │   │  │                are multiple changes for a file. Generate the \\"explanation\\" p ↵
│  │   │  │                roperty first." ⏎
│  │   │  │                "The system is very smart and can understand how to apply your  ↵
│  │   │  │                edits to the files, you just need to provide minimal hints." ⏎
│  │   │  │                "Avoid repeating existing code, instead use comments to represe ↵
│  │   │  │                nt regions of unchanged code. Be as concise as possible. For ex ↵
│  │   │  │                ample:" ⏎
│  │   │  │                "// ...existing code..." ⏎
│  │   │  │                "{ changed code }" ⏎
│  │   │  │                "// ...existing code..." ⏎
│  │   │  │                "{ changed code }" ⏎
│  │   │  │                "// ...existing code..." ⏎
│  │   │  │                 ⏎
│  │   │  │                "Here is an example of how you should use format an edit to an  ↵
│  │   │  │                existing Person class:" ⏎
│  │   │  │                "class Person {" ⏎
│  │   │  │                ⇥ "// ...existing code..." ⏎
│  │   │  │                ⇥ "age: number;" ⏎
│  │   │  │                ⇥ "// ...existing code..." ⏎
│  │   │  │                ⇥ "getAge() {" ⏎
│  │   │  │                ⇥ "return this.age;" ⏎
│  │   │  │                ⇥ "}" ⏎
│  │   │  │                "}"
│  │   │  └─ parameters
│  │   │     ├─ type = "object"
│  │   │     ├─ properties
│  │   │     │  ├─ explanation
│  │   │     │  │  ├─ type = "string"
│  │   │     │  │  └─ description = "A short explanation of the edit being made."
│  │   │     │  ├─ filePath
│  │   │     │  │  ├─ type = "string"
│  │   │     │  │  └─ description = "An absolute path to the file to edit."
│  │   │     │  └─ code
│  │   │     │     ├─ type = "string"
│  │   │     │     └─ description = "The code change to apply to the file." ⏎
│  │   │     │                      "The system is very smart and can understand how to ap ↵
│  │   │     │                      ply your edits to the files, you just need to provide  ↵
│  │   │     │                      minimal hints." ⏎
│  │   │     │                      "Avoid repeating existing code, instead use comments t ↵
│  │   │     │                      o represent regions of unchanged code. Be as concise a ↵
│  │   │     │                      s possible. For example:" ⏎
│  │   │     │                      "// ...existing code..." ⏎
│  │   │     │                      "{ changed code }" ⏎
│  │   │     │                      "// ...existing code..." ⏎
│  │   │     │                      "{ changed code }" ⏎
│  │   │     │                      "// ...existing code..." ⏎
│  │   │     │                       ⏎
│  │   │     │                      "Here is an example of how you should use format an ed ↵
│  │   │     │                      it to an existing Person class:" ⏎
│  │   │     │                      "class Person {" ⏎
│  │   │     │                      ⇥ "// ...existing code..." ⏎
│  │   │     │                      ⇥ "age: number;" ⏎
│  │   │     │                      ⇥ "// ...existing code..." ⏎
│  │   │     │                      ⇥ "getAge() {" ⏎
│  │   │     │                      ⇥ ⇥ "return this.age;" ⏎
│  │   │     │                      ⇥ "}" ⏎
│  │   │     │                      "}"
│  │   │     └─ required = [ "explanation", "filePath", "code" ]
│  │   └─ type = "function"
│  ├─ [21]
│  │   ├─ function
│  │   │  ├─ name = "install_extension"
│  │   │  ├─ description = "Install an extension in VS Code. Use this tool to install an e ↵
│  │   │  │                xtension in Visual Studio Code as part of a new workspace creat ↵
│  │   │  │                ion process only."
│  │   │  └─ parameters
│  │   │     ├─ type = "object"
│  │   │     ├─ properties
│  │   │     │  ├─ id
│  │   │     │  │  ├─ type = "string"
│  │   │     │  │  └─ description = "The ID of the extension to install. This should be in ↵
│  │   │     │  │                    the format <publisher>.<extension>."
│  │   │     │  └─ name
│  │   │     │     ├─ type = "string"
│  │   │     │     └─ description = "The name of the extension to install. This should be  ↵
│  │   │     │                      a clear and concise description of the extension."
│  │   │     └─ required = [ "id", "name" ]
│  │   └─ type = "function"
│  ├─ [22]
│  │   ├─ function
│  │   │  ├─ name = "list_code_usages"
│  │   │  ├─ description = "Request to list all usages (references, definitions, implement ↵
│  │   │  │                ations etc) of a function, class, method, variable etc. Use thi ↵
│  │   │  │                s tool when " ⏎
│  │   │  │                "1. Looking for a sample implementation of an interface or clas ↵
│  │   │  │                s" ⏎
│  │   │  │                "2. Checking how a function is used throughout the codebase." ⏎
│  │   │  │                "3. Including and updating all usages when changing a function, ↵
│  │   │  │                 method, or constructor"
│  │   │  └─ parameters
│  │   │     ├─ type = "object"
│  │   │     ├─ properties
│  │   │     │  ├─ symbolName
│  │   │     │  │  ├─ type = "string"
│  │   │     │  │  └─ description = "The name of the symbol, such as a function name, clas ↵
│  │   │     │  │                   s name, method name, variable name, etc."
│  │   │     │  └─ filePaths
│  │   │     │     ├─ type = "array"
│  │   │     │     ├─ description = "One or more file paths which likely contain the defin ↵
│  │   │     │     │                ition of the symbol. For instance the file which decla ↵
│  │   │     │     │                res a class or function. This is optional but will spe ↵
│  │   │     │     │                ed up the invocation of this tool and improve the qual ↵
│  │   │     │     │                ity of its output."
│  │   │     │     └─ items = { type = "string" }
│  │   │     └─ required = [ "symbolName" ]
│  │   └─ type = "function"
│  ├─ [23]
│  │   ├─ function
│  │   │  ├─ name = "list_dir"
│  │   │  ├─ description = "List the contents of a directory. Result will have the name of ↵
│  │   │  │                 the child. If the name ends in /, it's a folder, otherwise a f ↵
│  │   │  │                ile"
│  │   │  └─ parameters
│  │   │     ├─ type = "object"
│  │   │     ├─ properties
│  │   │     │  └─ path
│  │   │     │     ├─ type = "string"
│  │   │     │     └─ description = "The absolute path to the directory to list."
│  │   │     └─ required = [ "path" ]
│  │   └─ type = "function"
│  ├─ [24]
│  │   ├─ function
│  │   │  ├─ name = "open_simple_browser"
│  │   │  ├─ description = "Preview a website or open a URL in the editor's Simple Browser ↵
│  │   │  │                . Useful for quickly viewing locally hosted websites, demos, or ↵
│  │   │  │                 resources without leaving the coding environment."
│  │   │  └─ parameters
│  │   │     ├─ type = "object"
│  │   │     ├─ properties
│  │   │     │  └─ url
│  │   │     │     ├─ type = "string"
│  │   │     │     └─ description = "The website URL to preview or open in the Simple Brow ↵
│  │   │     │                      ser inside the editor."
│  │   │     └─ required = [ "url" ]
│  │   └─ type = "function"
│  ├─ [25]
│  │   ├─ function
│  │   │  ├─ name = "read_file"
│  │   │  ├─ description = "Read the contents of a file." ⏎
│  │   │  │                 ⏎
│  │   │  │                "You must specify the line range you're interested in. Line num ↵
│  │   │  │                bers are 1-indexed. If the file contents returned are insuffici ↵
│  │   │  │                ent for your task, you may call this tool again to retrieve mor ↵
│  │   │  │                e content. Prefer reading larger ranges over doing many small r ↵
│  │   │  │                eads."
│  │   │  └─ parameters
│  │   │     ├─ type = "object"
│  │   │     ├─ properties
│  │   │     │  ├─ filePath
│  │   │     │  │  ├─ description = "The absolute path of the file to read."
│  │   │     │  │  └─ type = "string"
│  │   │     │  ├─ startLineNumber
│  │   │     │  │  ├─ type = "number"
│  │   │     │  │  └─ description = "The line number to start reading from, 1-based."
│  │   │     │  └─ endLineNumber
│  │   │     │     ├─ type = "number"
│  │   │     │     └─ description = "The inclusive line number to end reading at, 1-based. ↵
│  │   │     │                      "
│  │   │     └─ required = [ "filePath", "startLineNumber", "endLineNumber" ]
│  │   └─ type = "function"
│  ├─ [26]
│  │   ├─ function
│  │   │  ├─ name = "run_in_terminal"
│  │   │  ├─ description = "This tool allows you to execute shell commands in a persistent ↵
│  │   │  │                 terminal session, preserving environment variables, working di ↵
│  │   │  │                rectory, and other context across multiple commands." ⏎
│  │   │  │                 ⏎
│  │   │  │                "Command Execution:" ⏎
│  │   │  │                "- Supports chaining with && or ; (e.g., npm install && npm sta ↵
│  │   │  │                rt)." ⏎
│  │   │  │                "- Supports multi-line commands " ⏎
│  │   │  │                 ⏎
│  │   │  │                "Directory Management:" ⏎
│  │   │  │                "- Use absolute paths to avoid navigation issues." ⏎
│  │   │  │                 ⏎
│  │   │  │                "Program Execution:" ⏎
│  │   │  │                "- Supports Python, Node.js, and other executables." ⏎
│  │   │  │                "- Install dependencies via pip, npm, etc." ⏎
│  │   │  │                 ⏎
│  │   │  │                "Background Processes:" ⏎
│  │   │  │                "- For long-running tasks (e.g., servers), set isBackground=tru ↵
│  │   │  │                e." ⏎
│  │   │  │                "- Returns a terminal ID for checking status and runtime later. ↵
│  │   │  │                " ⏎
│  │   │  │                 ⏎
│  │   │  │                "Important Notes:" ⏎
│  │   │  │                "- If the command may produce excessively large output, use hea ↵
│  │   │  │                d or tail to reduce the output." ⏎
│  │   │  │                "- If a command may use a pager, you must something to disable  ↵
│  │   │  │                it. For example, you can use \`git --no-pager\`. Otherwise you sh ↵
│  │   │  │                ould add something like \` | cat\`. Examples: git, less, man, etc ↵
│  │   │  │                ."
│  │   │  └─ parameters
│  │   │     ├─ type = "object"
│  │   │     ├─ properties
│  │   │     │  ├─ command
│  │   │     │  │  ├─ type = "string"
│  │   │     │  │  └─ description = "The command to run in the terminal."
│  │   │     │  ├─ explanation
│  │   │     │  │  ├─ type = "string"
│  │   │     │  │  └─ description = "A one-sentence description of what the command does.  ↵
│  │   │     │  │                   This will be shown to the user before the command is r ↵
│  │   │     │  │                   un."
│  │   │     │  └─ isBackground
│  │   │     │     ├─ type = "boolean"
│  │   │     │     └─ description = "Whether the command starts a background process. If t ↵
│  │   │     │                      rue, the command will run in the background and you wi ↵
│  │   │     │                      ll not see the output. If false, the tool call will bl ↵
│  │   │     │                      ock on the command finishing, and then you will get th ↵
│  │   │     │                      e output. Examples of backgrond processes: building in ↵
│  │   │     │                       watch mode, starting a server. You can check the outp ↵
│  │   │     │                      ut of a backgrond process later on by using get_termin ↵
│  │   │     │                      al_output."
│  │   │     └─ required = [ "command", "explanation", "isBackground" ]
│  │   └─ type = "function"
│  ├─ [27]
│  │   ├─ function
│  │   │  ├─ name = "run_notebook_cell"
│  │   │  ├─ description = "This is a tool for running a code cell in a notebook file dire ↵
│  │   │  │                ctly in the notebook editor. The output from the execution will ↵
│  │   │  │                 be returned. Code cells should be run as they are added or edi ↵
│  │   │  │                ted when working through a problem to bring the kernel state up ↵
│  │   │  │                 to date and ensure the code executes successfully. Code cells  ↵
│  │   │  │                are ready to run and don't require any pre-processing. If asked ↵
│  │   │  │                 to run the first cell in a notebook, you should run the first  ↵
│  │   │  │                code cell since markdown cells cannot be executed."
│  │   │  └─ parameters
│  │   │     ├─ type = "object"
│  │   │     ├─ properties
│  │   │     │  ├─ filePath
│  │   │     │  │  ├─ type = "string"
│  │   │     │  │  └─ description = "An absolute path to the notebook file with the cell t ↵
│  │   │     │  │                   o run, or the URI of a untitled, not yet named, file,  ↵
│  │   │     │  │                   such as \`untitled:Untitled-1.ipynb"
│  │   │     │  ├─ reason
│  │   │     │  │  ├─ type = "string"
│  │   │     │  │  └─ description = "An optional explanation of why the cell is being run. ↵
│  │   │     │  │                    This will be shown to the user before the tool is run ↵
│  │   │     │  │                    and is not necessary if it's self-explanatory."
│  │   │     │  ├─ cellId
│  │   │     │  │  ├─ type = "string"
│  │   │     │  │  └─ description = "The ID for the code cell to execute. Avoid providing  ↵
│  │   │     │  │                   markdown cell IDs as nothing will be executed."
│  │   │     │  └─ continueOnError
│  │   │     │     ├─ type = "boolean"
│  │   │     │     └─ description = "Whether or not execution should continue for remainin ↵
│  │   │     │                      g cells if an error is encountered. Default to false u ↵
│  │   │     │                      nless instructed otherwise."
│  │   │     └─ required = [ "filePath", "cellId" ]
│  │   └─ type = "function"
│  ├─ [28]
│  │   ├─ function
│  │   │  ├─ name = "run_vscode_command"
│  │   │  ├─ description = "Run a command in VS Code. Use this tool to run a command in Vi ↵
│  │   │  │                sual Studio Code as part of a new workspace creation process on ↵
│  │   │  │                ly."
│  │   │  └─ parameters
│  │   │     ├─ type = "object"
│  │   │     ├─ properties
│  │   │     │  ├─ commandId
│  │   │     │  │  ├─ type = "string"
│  │   │     │  │  └─ description = "The ID of the command to execute. This should be in t ↵
│  │   │     │  │                   he format <command>."
│  │   │     │  ├─ name
│  │   │     │  │  ├─ type = "string"
│  │   │     │  │  └─ description = "The name of the command to execute. This should be a  ↵
│  │   │     │  │                   clear and concise description of the command."
│  │   │     │  └─ args
│  │   │     │     ├─ type = "array"
│  │   │     │     ├─ description = "The arguments to pass to the command. This should be  ↵
│  │   │     │     │                an array of strings."
│  │   │     │     └─ items = { type = "string" }
│  │   │     └─ required = [ "commandId", "name" ]
│  │   └─ type = "function"
│  ├─ [29]
│  │   ├─ function
│  │   │  ├─ name = "run_vs_code_task"
│  │   │  ├─ description = "Runs a VS Code task." ⏎
│  │   │  │                 ⏎
│  │   │  │                "- If you see that an appropriate task exists for building or r ↵
│  │   │  │                unning code, prefer to use this tool to run the task instead of ↵
│  │   │  │                 using the run_in_terminal tool." ⏎
│  │   │  │                "- Make sure that any appropriate build or watch task is runnin ↵
│  │   │  │                g before trying to run tests or execute code." ⏎
│  │   │  │                "- If the user asks to run a task, use this tool to do so."
│  │   │  └─ parameters
│  │   │     ├─ type = "object"
│  │   │     ├─ properties
│  │   │     │  ├─ workspaceFolder
│  │   │     │  │  ├─ type = "string"
│  │   │     │  │  └─ description = "The workspace folder path containing the task"
│  │   │     │  └─ id = { type = "string", description = "The task ID to run." }
│  │   │     └─ required = [ "workspaceFolder", "id" ]
│  │   └─ type = "function"
│  ├─ [30]
│  │   ├─ function
│  │   │  ├─ name = "semantic_search"
│  │   │  ├─ description = "Run a natural language search for relevant code or documentati ↵
│  │   │  │                on comments from the user's current workspace. Returns relevant ↵
│  │   │  │                 code snippets from the user's current workspace if it is large ↵
│  │   │  │                , or the full contents of the workspace if it is small."
│  │   │  └─ parameters
│  │   │     ├─ type = "object"
│  │   │     ├─ properties
│  │   │     │  └─ query
│  │   │     │     ├─ type = "string"
│  │   │     │     └─ description = "The query to search the codebase for. Should contain  ↵
│  │   │     │                      all relevant context. Should ideally be text that migh ↵
│  │   │     │                      t appear in the codebase, such as function names, vari ↵
│  │   │     │                      able names, or comments."
│  │   │     └─ required = [ "query" ]
│  │   └─ type = "function"
│  ├─ [31]
│  │   ├─ function
│  │   │  ├─ name = "test_failure"
│  │   │  └─ description = "Includes test failure information in the prompt."
│  │   └─ type = "function"
│  └─ [32]
│      ├─ function
│      │  ├─ name = "vscode_searchExtensions_internal"
│      │  ├─ description = "This is a tool for browsing Visual Studio Code Extensions Mark ↵
│      │  │                etplace. It allows the model to search for extensions and retri ↵
│      │  │                eve detailed information about them. The model should use this  ↵
│      │  │                tool whenever it needs to discover extensions or resolve inform ↵
│      │  │                ation about known ones. To use the tool, the model has to provi ↵
│      │  │                de the category of the extensions, relevant search keywords, or ↵
│      │  │                 known extension IDs. Note that search results may include fals ↵
│      │  │                e positives, so reviewing and filtering is recommended."
│      │  └─ parameters
│      │     ├─ type = "object"
│      │     └─ properties
│      │        ├─ category
│      │        │  ├─ type = "string"
│      │        │  ├─ description = "The category of extensions to search for"
│      │        │  └─ enum
│      │        │     ├─ [0]: "AI"
│      │        │     ├─ [1]: "Azure"
│      │        │     ├─ [2]: "Chat"
│      │        │     ├─ [3]: "Data Science"
│      │        │     ├─ [4]: "Debuggers"
│      │        │     ├─ [5]: "Extension Packs"
│      │        │     ├─ [6]: "Education"
│      │        │     ├─ [7]: "Formatters"
│      │        │     ├─ [8]: "Keymaps"
│      │        │     ├─ [9]: "Language Packs"
│      │        │     ├─ [10]: "Linters"
│      │        │     ├─ [11]: "Machine Learning"
│      │        │     ├─ [12]: "Notebooks"
│      │        │     ├─ [13]: "Programming Languages"
│      │        │     ├─ [14]: "SCM Providers"
│      │        │     ├─ [15]: "Snippets"
│      │        │     ├─ [16]: "Testing"
│      │        │     ├─ [17]: "Themes"
│      │        │     ├─ [18]: "Visualization"
│      │        │     └─ [19]: "Other"
│      │        ├─ keywords
│      │        │  ├─ type = "array"
│      │        │  ├─ items = { type = "string" }
│      │        │  └─ description = "The keywords to search for"
│      │        └─ ids
│      │           ├─ type = "array"
│      │           ├─ items = { type = "string" }
│      │           └─ description = "The ids of the extensions to search for"
│      └─ type = "function"
├─ n = 1
└─ stream = !t"
`;

exports[`can print empty Map 1`] = `
"╿
└─ Map {}"
`;

exports[`can print instance of Map - 2 1`] = `
"╿
└─ foo
   └─ Map {}
      ├─ foo = "bar"
      ├─ longKey = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmo ↵
      │            d"
      └─ x = 123"
`;

exports[`can print instance of Map - 3 1`] = `
"╿
├─ [0]: 1
├─ [1]
│   └─ [0]
│       └─ Map {}
│          ├─ foo = "bar"
│          ├─ longKey = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do e ↵
│          │            iusmod"
│          └─ x = 123
└─ [2]: 3"
`;

exports[`can print instance of Map 1`] = `
"╿
└─ Map {}
   ├─ foo = "bar"
   ├─ longKey = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod"
   ├─ x = 123
   ├─ !n = "null"
   ├─ !u = "undefined"
   ├─ !t = "true"
   ├─ !f = "false"
   ├─ 123 = "number"
   ├─ .1 = "float"
   ├─ string = "string"
   ├─ /abc/ = "regexp"
   └─ Date { 1752922409243 } = "date""
`;

exports[`can print instance of Set 1`] = `
"╿
└─ thisIsASet
   └─ Set {}
      ├─ [0]: "foo"
      ├─ [1]: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tem ↵
      │       por incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, qu ↵
      │       is nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo conseq ↵
      │       uat."
      ├─ [2]: 123
      ├─ [3]
      │   └─ Map {}
      │      ├─ foo = "bar"
      │      ├─ longKey = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do ↵
      │      │             eiusmod"
      │      └─ x = 123
      ├─ [4]: !t
      ├─ [5]: !f
      └─ [6]: [ !n, !u, .123 ]"
`;

exports[`can print small Set 1`] = `
"╿
└─ x
   └─ Set { 123,456,789,123,456, 223,456,789,123,456, 323,456,789,123,456, 423,456,789,123 ↵
      ,456 }"
`;

exports[`can specify line width 1`] = `
"╿
├─ [0]: "bar"
├─ [1]: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore m ↵
│       agna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo co ↵
│       nsequat."
└─ [2]: 123"
`;

exports[`can wrap long array values 1`] = `
"╿
├─ [0]: "bar"
├─ [1]: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor in ↵
│       cididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud e ↵
│       xercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
└─ [2]: 123"
`;

exports[`can wrap long object keys 1`] = `
"╿
├─ foo = "bar"
├─ thisIsAVeryVeryVeryLongKeyThatNeedsWrap ↵
│  pingBecauseItIsWayTooLong = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. S ↵
│                              ed do eiusmod tempor incididunt ut labore et dolore magna a ↵
│                              liqua. Ut enim ad minim veniam, quis nostrud exercitation u ↵
│                              llamco laboris nisi ut aliquip ex ea commodo consequat."
└─ x = 123"
`;

exports[`can wrap long object values 1`] = `
"╿
├─ foo = "bar"
├─ longValue = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod te ↵
│              mpor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,  ↵
│              quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo con ↵
│              sequat."
└─ x = 123"
`;

exports[`single long Uint8Array 1`] = `
"Uint8Array { 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 10 11 12 13 14 15 16 17 18 19 1A ↵
 1B 1C 1D 1E }"
`;
